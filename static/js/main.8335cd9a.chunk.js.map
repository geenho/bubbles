{"version":3,"sources":["logo.svg","sketches/sketchOne.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","sketchOne","p","bgColor","circlesCoord","localCirclesCoord","setup","createCanvas","window","innerWidth","innerHeight","myCustomRedrawAccordingToNewPropsHandler","props","console","log","draw","background","noStroke","fill","color","i","length","random","splice","push","updatePositions","circle","App","useState","Math","floor","setBgColor","setCirclesCoord","useEffect","newCirclesCoord","className","onClick","sketch","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8335cd9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default function sketchOne (p) {\n\n    let x , y;\n\n    let bgColor = (10, 10, 100);\n\n    var circlesCoord = [], localCirclesCoord = [];\n  \n    p.setup = function () {\n      p.createCanvas(window.innerWidth, window.innerHeight);\n      x = window.innerWidth / 2;\n      y = window.innerHeight - 100;\n    };\n  \n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        //this is for the props\n        console.log(\"rendering...\"); console.log(props);\n        if (props.bgColor){\n            console.log(\"found color\");\n            bgColor = props.bgColor;\n        }\n        if(props.circlesCoord){\n            console.log(\"found coordinates\");\n            circlesCoord = props.circlesCoord;\n            localCirclesCoord = circlesCoord;\n        }\n    };\n\n    function updatePositions(){\n        for(let i = 0; i < localCirclesCoord.length; i++){\n            circlesCoord[i][0] = localCirclesCoord[i][0] + p.random(-1, 1);\n            circlesCoord[i][1] = localCirclesCoord[i][1] + p.random(-1, 1);\n            if(circlesCoord[i][3] <= circlesCoord[i][2]){\n                circlesCoord[i][3] += 1;\n            }\n            localCirclesCoord[i][1] -= localCirclesCoord[i][2]/20;\n            if( localCirclesCoord[i][1] <= 0){\n                localCirclesCoord.splice(i, 1);\n                localCirclesCoord.push([p.random(window.innerWidth - 50), p.random(window.innerHeight - 150, window.innerHeight - 50), p.random(10,60), 0]);\n            }\n        }\n    }\n\n    p.draw = function () {\n        p.background(bgColor);\n        p.noStroke();\n\n        p.fill(p.color([255-bgColor[0], 255-bgColor[1], 255-bgColor[2]]));\n\n        updatePositions();\n\n        const maxWidth = window.innerWidth;\n        const maxHeight = window.innerHeight;\n        for (let i = 0; i < circlesCoord.length; i ++) {\n\n            p.circle(circlesCoord[i][0], circlesCoord[i][1], circlesCoord[i][3]);\n                \n        }\n    };\n\n}","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Polygon from './components/geometry/polyPath';\nimport P5Wrapper from 'react-p5-wrapper';\nimport Bubble from 'components/geometry/bubble';\nimport sketchOne from 'sketches/sketchOne';\n\n\nfunction App() {\n\n  const [bgColor, setBgColor] = useState([Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)]);\n\n  const [circlesCoord, setCirclesCoord] = useState([[ 500, 300, 22 ]]);\n\n  useEffect(() => {\n    let newCirclesCoord = [];\n    for(let i = 0; i < 50; i++){\n      newCirclesCoord.push([Math.floor(Math.random() * window.innerWidth - 50), Math.floor(Math.random() * window.innerHeight - 50), 10 + Math.floor(Math.random() * 50), 0]);\n    }\n    console.log(\"new coords\"); console.log(newCirclesCoord)\n    setCirclesCoord(newCirclesCoord);\n  },  []);\n\n  return (\n    <div className=\"App\" onClick={() => {\n      console.log(\"clicked\");\n      setBgColor([Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)]);\n      let newCirclesCoord = [];\n      for(let i = 0; i < 50; i++){\n        newCirclesCoord.push([Math.floor(Math.random() * window.innerWidth - 50), Math.floor(Math.random() * window.innerHeight - 50), 10 + Math.floor(Math.random() * 50), 0]);\n      }\n      console.log(\"new coords\"); console.log(newCirclesCoord)\n      setCirclesCoord(newCirclesCoord);\n    }}>\n      {/*<svg version=\"1.1\" id=\"canavs\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                viewBox=\"0 0 1000 1000\">\n        {[...Array(10 + Math.floor(Math.random() * 20))].map(() => <Bubble/>)\n\n        }\n      </svg>*/}\n      <P5Wrapper sketch={sketchOne} bgColor={bgColor} circlesCoord={circlesCoord}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}